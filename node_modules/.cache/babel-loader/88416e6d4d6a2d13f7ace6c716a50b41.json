{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const toDoSlice = createSlice({\n  name: 'toDo',\n  initialState: [{\n    id: 0,\n    text: 'Learn React',\n    completed: true\n  }, {\n    id: 1,\n    text: 'Learn Redux',\n    completed: false,\n    color: 'purple'\n  }, {\n    id: 2,\n    text: 'Build something fun!',\n    completed: false,\n    color: 'blue'\n  }],\n  reducers: {\n    todosReducer(state = initialState, action) {\n      switch (action.type) {\n        default:\n          return state;\n      }\n    }\n\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = toDoSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n\nexport const incrementAsync = amount => dispatch => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n}; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value;\nexport default toDoSlice.reducer;","map":{"version":3,"sources":["/Users/angelapizarras/Documents/Projects/roundSquare/src/features/toDos/toDosSlice.js"],"names":["createSlice","toDoSlice","name","initialState","id","text","completed","color","reducers","todosReducer","state","action","type","increment","decrement","incrementByAmount","actions","incrementAsync","amount","dispatch","setTimeout","selectCount","counter","value","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;AACjCE,EAAAA,IAAI,EAAE,MAD2B;AAEjCC,EAAAA,YAAY,EAAE,CACV;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,aAAf;AAA8BC,IAAAA,SAAS,EAAE;AAAzC,GADU,EAEV;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,aAAf;AAA8BC,IAAAA,SAAS,EAAE,KAAzC;AAAgDC,IAAAA,KAAK,EAAE;AAAvD,GAFU,EAGV;AAAEH,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,sBAAf;AAAuCC,IAAAA,SAAS,EAAE,KAAlD;AAAyDC,IAAAA,KAAK,EAAE;AAAhE,GAHU,CAFmB;AAOjCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,EAA+B;AACvC,cAAQA,MAAM,CAACC,IAAf;AACE;AACE,iBAAOF,KAAP;AAFJ;AAID;;AANG;AAPuB,CAAD,CAA7B;AAiBL,OAAO,MAAM;AAAEG,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8Cd,SAAS,CAACe,OAA9D,C,CAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGC,MAAM,IAAIC,QAAQ,IAAI;AAClDC,EAAAA,UAAU,CAAC,MAAM;AACfD,IAAAA,QAAQ,CAACJ,iBAAiB,CAACG,MAAD,CAAlB,CAAR;AACD,GAFS,EAEP,IAFO,CAAV;AAGD,CAJM,C,CAMP;AACA;AACA;;AACA,OAAO,MAAMG,WAAW,GAAGX,KAAK,IAAIA,KAAK,CAACY,OAAN,CAAcC,KAA3C;AAEP,eAAetB,SAAS,CAACuB,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const toDoSlice = createSlice({\n    name: 'toDo',\n    initialState: [\n        { id: 0, text: 'Learn React', completed: true },\n        { id: 1, text: 'Learn Redux', completed: false, color: 'purple' },\n        { id: 2, text: 'Build something fun!', completed: false, color: 'blue' }\n      ],\n    reducers: {\n        todosReducer(state = initialState, action) {\n            switch (action.type) {\n              default:\n                return state\n            }\n          }\n    }\n  });\n  \n  export const { increment, decrement, incrementByAmount } = toDoSlice.actions;\n  \n  // The function below is called a thunk and allows us to perform async logic. It\n  // can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n  // will call the thunk with the `dispatch` function as the first argument. Async\n  // code can then be executed and other actions can be dispatched\n  export const incrementAsync = amount => dispatch => {\n    setTimeout(() => {\n      dispatch(incrementByAmount(amount));\n    }, 1000);\n  };\n  \n  // The function below is called a selector and allows us to select a value from\n  // the state. Selectors can also be defined inline where they're used instead of\n  // in the slice file. For example: `useSelector((state) => state.counter.value)`\n  export const selectCount = state => state.counter.value;\n  \n  export default toDoSlice.reducer;"]},"metadata":{},"sourceType":"module"}